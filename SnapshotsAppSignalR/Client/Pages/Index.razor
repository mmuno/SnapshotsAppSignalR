@page "/"
@using System.Threading
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<h1>Snapshots with SignalR</h1>

<p>
    <input @bind="_snapshotId" placeholder="Type channel Id" />
    <button @onclick="StartSnapshotsStream" class="btn btn-primary">Start Single Snapshots</button>
    <button @onclick="StopSnapshotsStream" class="btn btn-primary">Stop Single Snapshots</button>
</p>

Snapshots Count: <strong>@_ssCount</strong>

<div class="control-section col-md-8">
    <SfChart EnableCanvas="true" @ref="_chartInstance">
        <ChartEvents Loaded="@ChartLoaded" Load="ChartLoad"></ChartEvents>
        <ChartPrimaryXAxis>
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
        <ChartSeriesCollection>
            <ChartSeries Name="Series" XName="@nameof(LineChartData.XValue)" YName="@nameof(LineChartData.YValue)" DataSource="@_dataChart">
                <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>

@code {
    // ReSharper disable UnusedMember.Local
    private HubConnection _ssHubConnection;
    private int _snapshotId = 0;
    private int _ssCount;
    CancellationTokenSource _cancellationTokenSource;

    List<double> _plotData = new List<double>();

    protected override void OnInitialized()
    {
        // Start SignalR
        _ssHubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/snapshotsHub"))
            .Build();

        _ssHubConnection.On<int[]>("ReceiveMessage", (ss) =>
        {
            JsRuntime.InvokeAsync<string>("console.log", $"Ss {_ssCount}");
            _ssCount++;
            StateHasChanged();
        });

        _ssHubConnection.StartAsync();

        // Chart Configuration
    }

    async Task StartSnapshots()
    {
        await JsRuntime.InvokeAsync<string>("console.log", "Ss StartSnapshots");
        await _ssHubConnection.SendAsync("SendSnapshot", _snapshotId, _ssCount);
        _ssCount++;
    }

    async Task StartSnapshotsStream()
    {
        _cancellationTokenSource = new CancellationTokenSource();

        await JsRuntime.InvokeAsync<string>("console.log", "Ss StartSnapshotsStream");
        var ssStream = _ssHubConnection.StreamAsync<int[]>("SnapshotsStream", _cancellationTokenSource.Token);

        await foreach (var ss in ssStream)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"Ss {_ssCount}, ssSamples {ss.Length}");
            _ssCount++;
            _plotData.Clear();

            // Update Y axis
            LoadChart(ss);
            await Task.Delay(5);
        }
        _ssCount = 0;
    }

    async Task StopSnapshotsStream()
    {
        await JsRuntime.InvokeAsync<string>("console.log", "Ss StopSnapshotsStream");
        _cancellationTokenSource.Cancel();
    }

    public bool IsConnected =>
        _ssHubConnection.State == HubConnectionState.Connected;


    SfChart _chartInstance;
    string Data = "";
    public class LineChartData
    {
        public double XValue { get; set; }
        public double YValue { get; set; }
    }

    readonly List<LineChartData> _dataChart = new List<LineChartData>();
    DateTime _start;
    DateTime _end;
    double _value = 0;
    bool _findPerformance;

    void LoadChart(int[] data)
    {
        _dataChart.Clear();
        _start = DateTime.Now;
        for (var i = 0; i < data.Length; i++)
        {
            _dataChart.Add(new LineChartData() { XValue = i, YValue = data[i] });
        }

        _chartInstance.Refresh();
        _findPerformance = false;
    }

    void ChartLoaded(ILoadedEventArgs args)
    {
        _end = DateTime.Now;
        if (_findPerformance)
        {
            var diff = _end - _start;
            var timeValue = ((int)diff.TotalMilliseconds).ToString();
            var timeString = "Time Taken     " + timeValue + " ms";
            Data = timeString;
        }
    }
    string CurrentUri;
    void ChartLoad(ILoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap4") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }    // ReSharper restore UnusedMember.Local
}