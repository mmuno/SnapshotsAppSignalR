@page "/"
@using System.Threading
@using Blazorise.Charts
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<h1>Snapshots with SignalR</h1>

<Dropdown @ref="_timespanDropdown">
    <DropdownToggle Color="Color.Primary">
        Start Snapshots
    </DropdownToggle>
    <DropdownMenu>
        <DropdownItem Clicked="@Request50ms">50ms</DropdownItem>
        <DropdownDivider />
        <DropdownItem Clicked="@Request1000ms">1000ms</DropdownItem>
        <DropdownDivider />
        <DropdownItem Clicked="@Request5000ms">5000ms</DropdownItem>
    </DropdownMenu>
</Dropdown>

<input type="checkbox" id="positionV13" @onchange="eventArgs => { CheckboxClicked(PositionV13, eventArgs.Value);}" />
<label for="positionV13">Position V13</label>

<input type="checkbox" id="positionV24" @onchange="eventArgs => { CheckboxClicked(PositionV24, eventArgs.Value);}" />
<label for="positionV24">Position V24</label>

<input type="checkbox" id="positionW13" @onchange="eventArgs => { CheckboxClicked(PositionW13, eventArgs.Value);}" />
<label for="positionW13">Position W13</label>

<input type="checkbox" id="positionW24" @onchange="eventArgs => { CheckboxClicked(PositionW24, eventArgs.Value);}" />
<label for="positionW24">Position W24</label>

<input type="checkbox" id="positionZ12" @onchange="eventArgs => { CheckboxClicked(PositionZ12, eventArgs.Value);}" />
<label for="positionZ12">Position Z12</label>

<p>
    <button @onclick="StopSnapshotsStream" class="btn btn-primary">Stop Single Snapshots</button>
</p>

Snapshots Count: <strong>@_ssCount</strong>

<LineChart @ref="_lineChart" TItem="short" />


@code {
    // ReSharper disable UnusedMember.Local

    // Position ids
    const int PositionV13 = 0;
    const int PositionW13 = 1;
    const int PositionV24 = 2;
    const int PositionW24 = 3;
    const int PositionZ12 = 4;

    //, Color.Blue, Color.Purple, Color.Green, Color.Black,
    readonly string[] _backgroundPlotColors = 
    {
        ChartColor.FromRgba(255, 0, 0, 0.2f),
        ChartColor.FromRgba(0, 255, 0, 0.2f),
        ChartColor.FromRgba(0, 0, 255, 0.2f),
        ChartColor.FromRgba(128, 0, 128, 0.2f),
        ChartColor.FromRgba(255, 255, 255, 0.2f)
    };

    readonly string[] _borderPlotColors = 
    {
        ChartColor.FromRgba(255, 0, 0, 0.5f),
        ChartColor.FromRgba(0, 255, 0, 0.5f),
        ChartColor.FromRgba(0, 0, 255, 0.5f),
        ChartColor.FromRgba(128, 0, 128, 0.5f),
        ChartColor.FromRgba(255, 255, 255, 0.5f)
    };

    //Stream variables
    CancellationTokenSource _cancellationTokenSource;
    private int _ssCount;
    private HubConnection _ssHubConnection;

    // Chart variables
    LineChart<short> _lineChart = new LineChart<short>();
    List<LineChartDataset<short>> _lineChartDataSetList;
    List<string> _labels = new List<string>();

    // Ui variables
    Dropdown _timespanDropdown;
    readonly HashSet<int> _selectedChannelSet= new HashSet<int>();

    bool _firstRender = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _firstRender = firstRender;
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        // Chart Configuration
#if DEBUG
        if (!_firstRender)
            await JsRuntime.InvokeAsync<string>("console.log", "Redraw - Updating options");
#endif
        _lineChart.OptionsJsonString = "{\"elements\":{\"line\":{\"tension\": false}}," +
                                       "\"legend\":{\"display\": false}," +
                                       "\"animation\": {\"duration\": 0}," +
                                       "\"scales\": " +
                                       "{\"yAxes\": [{\"display\": true,\"ticks\": {\"max\": 1500,\"min\": -1500}}]}}"; //Disable animation

#if DEBUG
        if (!_firstRender)
            await JsRuntime.InvokeAsync<string>("console.log", "Redraw - Clear chart");
#endif
        _lineChart.Clear();

        if (_labels != null && _labels.Count > 0)
        {
#if DEBUG
            if (!_firstRender)
                await JsRuntime.InvokeAsync<string>("console.log", $"Redraw - Add labels = {_labels.Count}");
#endif
            _lineChart.AddLabel(_labels.ToArray());
        }
        else
        {
#if DEBUG
            if (!_firstRender)
                await JsRuntime.InvokeAsync<string>("console.log", "Redraw - Default labels");
#endif
            _labels = new List<string> {"1", "2", "3", "4", "5", "6" };
            _lineChart.AddLabel(_labels.ToArray());
        }

        if (_lineChartDataSetList != null && _lineChartDataSetList.Count > 0)
        {
            foreach (var lineData in _lineChartDataSetList)
            {
#if DEBUG
                if (!_firstRender)
                    await JsRuntime.InvokeAsync<string>("console.log", $"Redraw - Add Data = {_lineChartDataSetList.Count}, nSamples = {lineData.Data.Count}");
#endif
                _lineChart.AddDataSet(lineData);
            }
        }
        else
        {
#if DEBUG
            if (!_firstRender)
                await JsRuntime.InvokeAsync<string>("console.log", "Redraw - Default data");
#endif
            var data = new List<short> {100, 200, 300, 400, 500, 600};
            _lineChart.AddDataSet(GetLineChartDataSet(data, 1));
            data = new List<short> { 600, 500, 400, 300, 200, 100 };
            _lineChart.AddDataSet(GetLineChartDataSet(data, 2));
        }

#if DEBUG
        if (!_firstRender)
            await JsRuntime.InvokeAsync<string>("console.log", "Redraw - update");
#endif
        await _lineChart.Update();
    }

    LineChartDataset<short> GetLineChartDataSet(List<short> data, int idx)
    {
        return new LineChartDataset<short>
        {
            Label = "# of randoms",
            Data = data,
            BackgroundColor = new List<string> { _backgroundPlotColors[idx] },
            BorderColor = new List<string> { _borderPlotColors[idx] },
            Fill = false,
            PointRadius = 2,
            BorderDash = new List<int>()
        };
    }

    protected override void OnInitialized()
    {
        // Start SignalR
        _ssHubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/snapshotsHub"))
            .Build();

        /*
        _ssHubConnection.On<int[]>("ReceiveMessage", (ss) =>
        {
            JsRuntime.InvokeAsync<string>("console.log", $"Ss {_ssCount}");
            _ssCount++;
            StateHasChanged();
        });
        */

        _ssHubConnection.StartAsync();
    }

    /// <summary>
    /// Starts snapshots
    /// </summary>
    /// <param name="timeSpan">Time Span</param>
    /// <param name="selectedChannels">Selected Channels</param>
    /// <returns></returns>
    async Task StartSnapshotsStream(int timeSpan, HashSet<int> selectedChannels)
    {
#if DEBUG
        foreach (var channel in selectedChannels)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"Ss StartSnapshotsStream Ss channel = {channel}");
        }
#endif
        _cancellationTokenSource = new CancellationTokenSource();
#if DEBUG
        await JsRuntime.InvokeAsync<string>("console.log", "Ss StartSnapshotsStream");
#endif
        var ssStream = _ssHubConnection.StreamAsync<short[]>("SnapshotsStream", timeSpan, selectedChannels, _cancellationTokenSource.Token);

        // Check stream
        if (ssStream == null)
        {
#if DEBUG
            await JsRuntime.InvokeAsync<string>("console.log", "Ss StartSnapshotsStream - No channels selected");
#endif
            return;
        }

        var nSamples = timeSpan * 14;

        // Update labels
        UpdateLabels(nSamples);

        await foreach (var ss in ssStream)
        {
            // Check number of expected samples in stream
#if DEBUG
            await JsRuntime.InvokeAsync<string>("console.log", $"Ss StartSnapshotsStream - Snapshot, ss.Len = {ss.Length}, nSamples = {nSamples}, nChannels = {selectedChannels.Count}");
#endif
            if (ss.Length != nSamples * selectedChannels.Count)
            {
                continue;
            }

            UpdateLineChartDataSet(ss, nSamples, selectedChannels.Count);
            await HandleRedraw();
            await Task.Delay(5);
            _ssCount++;
        }
        _ssCount = 0;
    }

    private void UpdateLabels(in int nSamples)
    {
        if (_labels != null && nSamples == _labels.Count)
            return;

#if DEBUG
        JsRuntime.InvokeAsync<string>("console.log", @"Ss Updated labels");
#endif
        _labels = new List<string>();
        for (var i = 0; i < nSamples; i++)
        {
            _labels.Add(i.ToString());
        }
    }

    public void UpdateLineChartDataSet(short[] ss, int nSamples, int nChannels)
    {
        // Organize channel data
        _lineChartDataSetList = new List<LineChartDataset<short>>();
        for (var i = 0; i < nChannels; i++)
        {
            var chData = ss.Skip(i* nSamples).Take(nSamples).ToList();
#if DEBUG
            JsRuntime.InvokeAsync<string>("console.log", $@"Ss Adding nSamples = {chData.Count}");
#endif
            var lineChartDataSet = new LineChartDataset<short>
            {
                Label = "Channel i",
                Data = chData,
                BackgroundColor = new List<string> {_backgroundPlotColors[i]},
                BorderColor = new List<string> {_borderPlotColors[i]},
                Fill = false,
                PointRadius = 2,
                BorderDash = new List<int>()
            };
            _lineChartDataSetList.Add(lineChartDataSet);
        }
    }

    async Task StopSnapshotsStream()
    {
#if DEBUG
        await JsRuntime.InvokeAsync<string>("console.log", "Ss StopSnapshotsStream");
#endif
        _cancellationTokenSource.Cancel();
    }

    public bool IsConnected =>
        _ssHubConnection.State == HubConnectionState.Connected;

    // ReSharper disable once InconsistentNaming
    async Task Request50ms()
    {
#if DEBUG
        await JsRuntime.InvokeAsync<string>("console.log", "Ss Request50ms");
#endif  
        await StartSnapshotsStream(50, _selectedChannelSet);
    }

    // ReSharper disable once InconsistentNaming
    async Task Request1000ms()
    {
#if DEBUG
        await JsRuntime.InvokeAsync<string>("console.log", "Ss Request1000ms");
#endif
        await StartSnapshotsStream(1000, _selectedChannelSet);
    }

    // ReSharper disable once InconsistentNaming
    async Task Request5000ms()
    {
#if DEBUG
        await JsRuntime.InvokeAsync<string>("console.log", "Ss Request5000ms");
#endif
        await StartSnapshotsStream(5000, _selectedChannelSet);
    }

    void CheckboxClicked(int channelId, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            _selectedChannelSet.Add(channelId);
        }
        else
        {
            _selectedChannelSet.Remove(channelId);
        }
    }
    // ReSharper restore UnusedMember.Local
}

