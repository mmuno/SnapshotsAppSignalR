@page "/"
@using System.Drawing
@using System.Threading
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util
@using Microsoft.AspNetCore.SignalR.Client
@using Point = ChartJs.Blazor.ChartJS.Common.Point
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<h1>Snapshots with SignalR</h1>

<p>
    <input @bind="_snapshotId" placeholder="Type channel Id" />
    <button @onclick="StartSnapshotsStream" class="btn btn-primary">Start Single Snapshots</button>
    <button @onclick="StopSnapshotsStream" class="btn btn-primary">Stop Single Snapshots</button>
</p>

Snapshots Count: <strong>@_ssCount</strong>

<ChartJsLineChart @ref="_lineChartJs" Config="@_lineConfig" Width="600" Height="300" />


@code {
    // ReSharper disable UnusedMember.Local

    private HubConnection _ssHubConnection;
    private int _snapshotId = 0;
    private int _ssCount;
    CancellationTokenSource _cancellationTokenSource;

    private ChartJsLineChart _lineChartJs;
    LineConfig _lineConfig;
    LineDataset<Point> _tempDataSet;

    protected override void OnInitialized()
    {
        // Start SignalR
        _ssHubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/snapshotsHub"))
            .Build();

        _ssHubConnection.On<int[]>("ReceiveMessage", (ss) =>
        {
            JsRuntime.InvokeAsync<string>("console.log", $"Ss {_ssCount}");
            _ssCount++;
            StateHasChanged();
        });

        _ssHubConnection.StartAsync();

        // Chart configuration
        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                ResponsiveAnimationDuration = 0,
                Animation = new Animation
                {
                    Duration = 0
                },
                Legend = new Legend
                {
                    Display = false
                },
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Snapshots"
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    yAxes = new List<CartesianAxis>
        {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Position"
                            }
                        }
                    },

                    xAxes = new List<CartesianAxis>
        {
                        new LinearCartesianAxis
                        {
                            GridLines = new GridLines
                            {
                                Display = false
                            },
                            Ticks = new LinearCartesianTicks
                            {
                                AutoSkipPadding = 100,
                                AutoSkip = true,
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Time",
                            }
                        }
                    }
                },

                Hover = new LineOptionsHover
                {
                    AnimationDuration = 0,
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        _tempDataSet = new LineDataset<Point>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(Color.DodgerBlue),
            BorderColor = ColorUtil.FromDrawingColor(Color.DeepSkyBlue),
            Label = "Position",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 2,
            PointBorderWidth = 2,
            SteppedLine = SteppedLine.False,
            LineTension = 0
        };

        _lineConfig.Data.Datasets.Add(_tempDataSet);
    }

    async Task StartSnapshots()
    {
        await JsRuntime.InvokeAsync<string>("console.log", "Ss StartSnapshots");
        await _ssHubConnection.SendAsync("SendSnapshot", _snapshotId, _ssCount);
        _ssCount++;
    }

    async Task StartSnapshotsStream()
    {
        _cancellationTokenSource = new CancellationTokenSource();

        await JsRuntime.InvokeAsync<string>("console.log", "Ss StartSnapshotsStream");
        var ssStream = _ssHubConnection.StreamAsync<int[]>(
        "SnapshotsStream", _cancellationTokenSource.Token);

        await foreach (var ss in ssStream)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"Ss {_ssCount}");
            _ssCount++;

            var ssPointValues = ss.Select((t, i) => new Point(i, t)).ToList();
            _tempDataSet.RemoveRange(0, _tempDataSet.Data.Count);
            _tempDataSet.AddRange(ssPointValues);

            await _lineChartJs.Update();
            await Task.Delay(10);

            StateHasChanged();
        }
    }

    async Task StopSnapshotsStream()
    {
        await JsRuntime.InvokeAsync<string>("console.log", "Ss StopSnapshotsStream");
        _cancellationTokenSource.Cancel();
        _ssCount = 0;
    }

    public bool IsConnected =>
        _ssHubConnection.State == HubConnectionState.Connected;

    // ReSharper restore UnusedMember.Local
}