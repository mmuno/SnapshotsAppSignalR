@page "/"
@using System.Threading
@using Blazorise.Charts
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<h1>Snapshots with SignalR</h1>

<p>
    <input @bind="_snapshotId" placeholder="Type channel Id" />
    <button @onclick="StartSnapshotsStream" class="btn btn-primary">Start Single Snapshots</button>
    <button @onclick="StopSnapshotsStream" class="btn btn-primary">Stop Single Snapshots</button>
</p>

Snapshots Count: <strong>@_ssCount</strong>

<LineChart @ref="_lineChart" TItem="double" />


@code {
    // ReSharper disable UnusedMember.Local
    private HubConnection _ssHubConnection;
    private int _snapshotId = 0;
    private int _ssCount;
    CancellationTokenSource _cancellationTokenSource;

    LineChart<double> _lineChart = new LineChart<double>();
    List<double> _plotData = new List<double>();

    LineChartOptions _options = new LineChartOptions
    {
        Legend = new Legend
        {
            Display = false
        },
        Animation = new Animation()
        {
            Duration = 0
        },
        SpanGaps = false,
        Tooltips = new Tooltips()
        {
            Enabled = false
        },
        Scales = new Scales()
        {
            YAxes = new List<Axe>()
            {
                new Axe
                {
                    Display = false,
                    Ticks = new AxeTicks()
                    {
                        BeginAtZero = false,
                        Display = true,
                        Major = new AxeMajorTick
                        {
                            Enabled = true
                        },
                        Minor = new AxeMinorTick()
                    },
                    GridLines = new AxeGridLines()
                    {
                        TickMarkLength = 2
                    }
                }
            },
            XAxes = new List<Axe>()
            {
                new Axe
                {
                    Display = false,
                    Ticks = new AxeTicks()
                    {
                        BeginAtZero = false,
                        Display = true,
                        Major = new AxeMajorTick
                        {
                            Enabled = true
                        },
                        Minor = new AxeMinorTick()
                    },
                    GridLines = new AxeGridLines()
                    {
                        TickMarkLength = 2
                    }
                }
            }
        }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        // _lineChart.SetOptions(_options);

        _lineChart.Clear();
        _lineChart.AddLabel(_labels.ToArray());
        _lineChart.AddDataSet(GetLineChartDataSet());
        await _lineChart.Update();
    }

    LineChartDataset<double> GetLineChartDataSet()
    {
        return new LineChartDataset<double>
        {
            Label = "# of randoms",
            Data = _plotData,
            BackgroundColor = _backgroundColors,
            BorderColor = _borderColors,
            Fill = false,
            PointRadius = 2,
            BorderDash = new List<int>()
        };
    }

    List<string> _labels = new List<string>();
    readonly List<string> _backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f) };
    readonly List<string> _borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f) };

    protected override void OnInitialized()
    {
        // Start SignalR
        _ssHubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/snapshotsHub"))
            .Build();

        _ssHubConnection.On<int[]>("ReceiveMessage", (ss) =>
        {
            JsRuntime.InvokeAsync<string>("console.log", $"Ss {_ssCount}");
            _ssCount++;
            StateHasChanged();
        });

        _ssHubConnection.StartAsync();

        // Chart Configuration
    }

    async Task StartSnapshots()
    {
        await JsRuntime.InvokeAsync<string>("console.log", "Ss StartSnapshots");
        await _ssHubConnection.SendAsync("SendSnapshot", _snapshotId, _ssCount);
        _ssCount++;
    }

    async Task StartSnapshotsStream()
    {
        _cancellationTokenSource = new CancellationTokenSource();

        await JsRuntime.InvokeAsync<string>("console.log", "Ss StartSnapshotsStream");
        var ssStream = _ssHubConnection.StreamAsync<int[]>("SnapshotsStream", _cancellationTokenSource.Token);

        await foreach (var ss in ssStream)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"Ss {_ssCount}, ssSamples {ss.Length}");
            _ssCount++;
            _plotData.Clear();

            // Update Y axis
            _plotData = ss.Select(ssElement => (double)ssElement).ToList();

            // Update labels
            _labels = new List<string>();
            for (var i = 0; i < ss.Length; i++)
            {
                _labels.Add(i.ToString());
            }

            await HandleRedraw();
        }
        _ssCount = 0;
    }

    async Task StopSnapshotsStream()
    {
        await JsRuntime.InvokeAsync<string>("console.log", "Ss StopSnapshotsStream");
        _cancellationTokenSource.Cancel();
    }

    public bool IsConnected =>
        _ssHubConnection.State == HubConnectionState.Connected;

    // ReSharper restore UnusedMember.Local
}